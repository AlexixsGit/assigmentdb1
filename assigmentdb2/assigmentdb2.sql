/*Create tablespaces*/
create tablespace gofar_travel datafile ',tempDataFile01.dbf' size 500m,'tempDataFile02.dbf' size 300m,'tempDataFile03.dbf' size 224m
autoextend on maxsize 1024m
extent management local
segment space management auto
online;

create tablespace test_purposes datafile ',tempDataFile04.dbf' size 500m
autoextend on maxsize 500m
extent management local
segment space management auto
online;


CREATE UNDO TABLESPACE undotbs
     DATAFILE 'tempDataFile06.dbf' SIZE 5M REUSE AUTOEXTEND ON;


/*USER DBA and assign it to the tablespace called "gofar_travel"*/
CREATE USER DBA_USER 
IDENTIFIED BY dba_user
DEFAULT TABLESPACE gofar_travel 
QUOTA UNLIMITED  ON gofar_travel;

/*Assign dba role and permissions to connect to the user just created*/
GRANT DBA TO DBA_USER;
GRANT CONNECT TO DBA_USER;

/*Profiles*/
CREATE PROFILE manager LIMIT
PASSWORD_LIFE_TIME 40
SESSIONS_PER_USER 1
IDLE_TIME 15
FAILED_LOGIN_ATTEMPTS 4;

CREATE PROFILE finance LIMIT
PASSWORD_LIFE_TIME 15
SESSIONS_PER_USER 1
IDLE_TIME 3
FAILED_LOGIN_ATTEMPTS 2;

CREATE PROFILE development LIMIT
PASSWORD_LIFE_TIME 100
SESSIONS_PER_USER 2
IDLE_TIME 30;

/*Users*/
CREATE USER user1 
IDENTIFIED BY user123
DEFAULT TABLESPACE gofar_travel 
profile manager;

GRANT CONNECT TO user1;

CREATE USER user2 
IDENTIFIED BY user2
DEFAULT TABLESPACE gofar_travel 
profile finance;

GRANT CONNECT TO user2;

CREATE USER user3 
IDENTIFIED BY user3
DEFAULT TABLESPACE gofar_travel 
profile development;

GRANT CONNECT TO user3;

CREATE USER user4 
IDENTIFIED BY user4
DEFAULT TABLESPACE gofar_travel 
profile development;

GRANT CONNECT TO user4;

/*Lock the users associate with profiles: manager and finance*/
ALTER USER user1 ACCOUNT LOCK;
ALTER USER user2 ACCOUNT LOCK;

/*DROP TABLESPACE test_purposes*/
DROP TABLESPACE test_purposes
   INCLUDING CONTENTS AND DATAFILES;
   

/*Vehicles Sequences*/
CREATE SEQUENCE VEHICLES_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE NEW_VEHICLES_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE MANUFACTURE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE VEHICLES_FOR_SALE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE TRADE_IN_VEHICLES_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE HISTORICAL_DATA_VEHICLES_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

/*Accesories Sequences*/
CREATE SEQUENCE ACCESORIES_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

/*INVOICE Sequences*/
CREATE SEQUENCE INVOICE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


/*INVOCE_DETAIL Sequences*/
CREATE SEQUENCE INVOICE_DETAIL_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


/*INVOCE_DETAIL Sequences*/
CREATE SEQUENCE ACCESORIES_INVENTORY_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


/*SALES_PERSON Sequences*/
CREATE SEQUENCE SALES_PERSON_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

/*CUSTOMER Sequences*/
CREATE SEQUENCE CUSTOMER_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


/*CREATE TABLES*/
CREATE TABLE VEHICLES (
  id number PRIMARY KEY,
  status varchar2(36) NOT NULL,
  vin varchar2(255),
  name varchar2(255) default NULL,
  model varchar2(11) default NULL,
  year varchar2(255)
);

CREATE TABLE NEW_VEHICLES (
  id number PRIMARY KEY,
  vehicle_for_sale_id number not null,
  manufacture_id number not null,
  cost number(10,2) not null
);

CREATE TABLE MANUFACTURES (
  id number PRIMARY KEY,
  name varchar2(255) not null,
  address varchar2(255) not null,
  city varchar2(255) not null
);

CREATE TABLE VEHICLES_FOR_SALE (
  id number PRIMARY KEY,
  vehicle_id number not null,
  description varchar2(255) not null
);

CREATE TABLE TRADE_IN_VEHICLES (
  id number PRIMARY KEY,
  vehicle_for_sale_id number not null,
  cost number(10,2) not null,
  other_details varchar2(255) null
);


CREATE TABLE HISTORICAL_DATA_FOR_VEHICLES (
  id number PRIMARY KEY,
  vehicle_for_sale_id number null,
  invoice_id number null,
  status varchar2(255) null
);

CREATE TABLE ACCESORIES (
  ID number primary key,
  CODE varchar2(255),
  DESCRIPTION varchar(255),
  COST NUMBER(10,2),
  SELLING_PRICE NUMBER(10,2),
  MANUFACURE_ID NUMBER(10,2) not null
) ;

CREATE TABLE INVOICE(
ID NUMBER PRIMARY KEY,
CUSTOMER_ID NUMBER not null,
VEHICLE_FOR_SALE_ID NUMBER,
FINAL_PRICE NUMBER(10,2),
PLUS NUMBER(10,2),
TAXES NUMBER(10,2),
LICENSE_FEES NUMBER(10,2),
SALES_PERSON_ID NUMBER,
TRADE_IN_VEHICLE_ID NUMBER
);

CREATE TABLE INVOICE_DETAIL(
ID NUMBER PRIMARY KEY,
INVOICE_ID NUMBER,
ACCESORIES_ID NUMBER,
COST NUMBER(10,2) NOT NULL
);

CREATE TABLE ACCESORIES_INVENTORY(
ID NUMBER PRIMARY KEY,
accesory_ID NUMBER not null,
units_available number default 30
);

CREATE TABLE SALES_PERSON(
  ID number primary key,
  NAME varchar2(255)
);

CREATE TABLE CUSTOMER(
  ID number primary key,
  NAME varchar2(255),
  ADDRESS VARCHAR2(255) default NULL,
  PHONE varchar2(100) default NULL
);

/*FOREIGN KEYS*/
ALTER TABLE NEW_VEHICLES ADD CONSTRAINT FK_VEHICLE_FOR_SALE
      FOREIGN KEY (VEHICLE_FOR_SALE_ID) REFERENCES VEHICLES_FOR_SALE (ID);
      
ALTER TABLE NEW_VEHICLES ADD CONSTRAINT FK_MANUFACTURE
      FOREIGN KEY (MANUFACTURE_ID) REFERENCES MANUFACTURES (ID);
      
ALTER TABLE VEHICLES_FOR_SALE ADD CONSTRAINT FK_VEHICLE
      FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLES (ID);
      
ALTER TABLE TRADE_IN_VEHICLES ADD CONSTRAINT FK_TRADE_VEHICLE_FOR_SALE
      FOREIGN KEY (VEHICLE_FOR_SALE_ID) REFERENCES VEHICLES_FOR_SALE (ID);

ALTER TABLE HISTORICAL_DATA_FOR_VEHICLES ADD CONSTRAINT FK_HIST_VEHICLE_FOR_SALE
      FOREIGN KEY (VEHICLE_FOR_SALE_ID) REFERENCES VEHICLES_FOR_SALE (ID);
      
ALTER TABLE HISTORICAL_DATA_FOR_VEHICLES ADD CONSTRAINT FK_HIST_INVOICE
      FOREIGN KEY (INVOICE_ID) REFERENCES INVOICE (ID);

ALTER TABLE INVOICE ADD CONSTRAINT FK_CUSTOMER
      FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (ID);
      
ALTER TABLE INVOICE ADD CONSTRAINT FK_INVOICE_VEHICLE_FOR_SALE
      FOREIGN KEY (VEHICLE_FOR_SALE_ID) REFERENCES VEHICLES_FOR_SALE (ID);  
      
      
ALTER TABLE INVOICE ADD CONSTRAINT FK_INVOICE_TRADE_IN_VEHICLE
      FOREIGN KEY (TRADE_IN_VEHICLE_ID) REFERENCES TRADE_IN_VEHICLES (ID);  
      
ALTER TABLE INVOICE ADD CONSTRAINT FK_SALES_PERSON
      FOREIGN KEY (SALES_PERSON_ID) REFERENCES SALES_PERSON (ID);
      
ALTER TABLE INVOICE_DETAIL ADD CONSTRAINT FK_INVDETAIL_INVOICE
      FOREIGN KEY (INVOICE_ID) REFERENCES INVOICE (ID);

ALTER TABLE INVOICE_DETAIL ADD CONSTRAINT FK_INVDETAIL_ACCESORY
      FOREIGN KEY (ACCESORIES_ID) REFERENCES ACCESORIES (ID);      

ALTER TABLE ACCESORIES_INVENTORY ADD CONSTRAINT FK_ACCINV_ACCESORY
      FOREIGN KEY (accesory_ID) REFERENCES ACCESORIES (ID);    

alter table HISTORICAL_DATA_FOR_VEHICLES
    add  constraint ckHistoricalTable check (status in ('NEW', 'TRADE', 'SOLD'));
    

/*Create a view in order to display those products which are under 5 units availables, the view should
have the id, the name of the product, code and the name of the manufacturer*/
create or replace view accesories_under_five_units as
select ac.id, ac.description as name, ac.code, mf.name as manufacturer from accesories ac inner join accesories_inventory acinv on ac.id = acinv.accesory_ID
inner join MANUFACTURES mf on mf.id = ac.MANUFACURE_ID
where acinv.units_available < 5;

    
    
    